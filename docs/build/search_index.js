var documenterSearchIndex = {"docs":
[{"location":"cg/#FrechetDist.jl-/-Computational-Geometry","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.jl / Computational Geometry","text":"","category":"section"},{"location":"cg/","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.jl / Computational Geometry","text":"The package provides some basic geometric types in the cg submodule.","category":"page"},{"location":"cg/#Package-Features","page":"FrechetDist.jl / Computational Geometry","title":"Package Features","text":"","category":"section"},{"location":"cg/","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.jl / Computational Geometry","text":"Provides types: Point, Segment, Line, Polygon.","category":"page"},{"location":"cg/#Basic-geometric-types","page":"FrechetDist.jl / Computational Geometry","title":"Basic geometric types","text":"","category":"section"},{"location":"cg/","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.jl / Computational Geometry","text":"Modules = [FrechetDist.cg]\nOrder   = [:type]","category":"page"},{"location":"cg/#FrechetDist.cg.Line","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.cg.Line","text":"Line in N dimensions.\n\n`p` is a point on the line and `u` is the direction vector (not\nnecessarily normalized). Parametrised as $p + ut$\n\n\n\n\n\n","category":"type"},{"location":"cg/#FrechetDist.cg.Point","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.cg.Point","text":"Point\n\nPoint in N dimensions. Implemented currently as a struct with\nStaticArray for values. It is templated, with `N` for dimension,\nand `T` for underlying type.\n\n\n\n\n\n","category":"type"},{"location":"cg/#FrechetDist.cg.Segment","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.cg.Segment","text":"Segment\n\nSpecifies a directed segment by two endpoints.\n\n\n\n\n\n","category":"type"},{"location":"cg/#Functions","page":"FrechetDist.jl / Computational Geometry","title":"Functions","text":"","category":"section"},{"location":"cg/","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.jl / Computational Geometry","text":"Modules = [FrechetDist.cg]\nOrder   = [:function]\n","category":"page"},{"location":"cg/#FrechetDist.cg.Polygon_read_plt_file-Tuple{Any}","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.cg.Polygon_read_plt_file","text":"Polygon_read_plt_file\n\nReads a .plt file into a polygon (2d floating point).\n\n\n\n\n\n","category":"method"},{"location":"cg/#FrechetDist.cg.Segment_get_bisection_point-Union{Tuple{T}, Tuple{N}, Tuple{FrechetDist.cg.Segment{N, T}, Any, Any}} where {N, T}","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.cg.Segment_get_bisection_point","text":"Segment_get_bisection_point -> Bool, Real, Point\n\nComputes the intersection point of the segment `seg` with the\n\nbisector plane between p and q.\n\nReturns\n\nThe first argument returns whether the segment intersects the bisector, the pramaterized location (tm), and the intersection piont itself.\n\n\n\n\n\n","category":"method"},{"location":"cg/#FrechetDist.cg.Segment_nn_point-Union{Tuple{T}, Tuple{N}, Tuple{FrechetDist.cg.Segment{N, T}, FrechetDist.cg.Point{N, T}}} where {N, T}","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.cg.Segment_nn_point","text":"Segment_nn_point\n\nReturns the closest point on the segment s to the query point qr.\n\n\n\n\n\n","category":"method"},{"location":"cg/#FrechetDist.cg.dist_seg_nn_point-Union{Tuple{T}, Tuple{N}, Tuple{FrechetDist.cg.Point{N, T}, FrechetDist.cg.Point{N, T}, FrechetDist.cg.Point{N, T}}} where {N, T}","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.cg.dist_seg_nn_point","text":"dist_seg_nn_point\n\nReturns the distance to the closest point lying on the segment induced by the first two points, to the query point. By avoiding creating the segment iself, it is hopeflly more efficient.\n\n\n\n\n\n","category":"method"},{"location":"cg/#FrechetDist.cg.induced_seg_nn_point-Union{Tuple{T}, Tuple{N}, Tuple{FrechetDist.cg.Point{N, T}, FrechetDist.cg.Point{N, T}, FrechetDist.cg.Point{N, T}}} where {N, T}","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.cg.induced_seg_nn_point","text":"induced_seg_nn_point\n\nReturns the closest point to the segment induced by the first two points, to the query point. By avoiding creating the segment iself, it is hopeflly more efficient.\n\n\n\n\n\n","category":"method"},{"location":"cg/#FrechetDist.cg.point-Tuple","page":"FrechetDist.jl / Computational Geometry","title":"FrechetDist.cg.point","text":"point( args... )\n\nA flexible constructor for a point specified by the arguments. Thus point( 2.0, 3.0, 4.0 ) defined the 3d point (2.0, 3.0, 4.0).\n\n\n\n\n\n","category":"method"},{"location":"morphing/#FrechetDist.jl-/-Morhping","page":"FrechetDist.jl / Morhping","title":"FrechetDist.jl / Morhping","text":"","category":"section"},{"location":"morphing/","page":"FrechetDist.jl / Morhping","title":"FrechetDist.jl / Morhping","text":"A *morphing* is an encoding of a \"matching\" between two curves. It\nis the output of the various Frechet distance computation functions.\nThe package provides some basic geometric types in the cg submodule.","category":"page"},{"location":"morphing/#Types","page":"FrechetDist.jl / Morhping","title":"Types","text":"","category":"section"},{"location":"morphing/","page":"FrechetDist.jl / Morhping","title":"FrechetDist.jl / Morhping","text":"Morphing\n'''","category":"page"},{"location":"morphing/#FrechetDist.Morphing","page":"FrechetDist.jl / Morhping","title":"FrechetDist.Morphing","text":"Morphing\n\nEncoding of a moprhing (i.e., matching) between two polygonal cuves.\n\n\n\n\n\n","category":"type"},{"location":"morphing/#Functions","page":"FrechetDist.jl / Morhping","title":"Functions","text":"","category":"section"},{"location":"morphing/","page":"FrechetDist.jl / Morhping","title":"FrechetDist.jl / Morhping","text":"Morphing_monotonize\nMorphing_empty\nMorphing_verify_valid\nMorphing_combine\nMorphing_extract_prm\nMorphing_as_polygons\nMorphing_extract_vertex_radii\nMorphing_extract_offsets","category":"page"},{"location":"morphing/#FrechetDist.Morphing_extract_offsets","page":"FrechetDist.jl / Morhping","title":"FrechetDist.Morphing_extract_offsets","text":"Morphing_extract_offsets\n\n\n\n\n\n","category":"function"},{"location":"morphing/","page":"FrechetDist.jl / Morhping","title":"FrechetDist.jl / Morhping","text":"```","category":"page"},{"location":"#FrechetDist.jl","page":"Home","title":"FrechetDist.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Compute the Fr√©chet distance between curves.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Provides algorithm for computing the discrete, VE, regular Frechet distance between polygonal curves. Supports also the retractable version.","category":"page"},{"location":"#Function-Documentation","page":"Home","title":"Function Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"frechet_c_compute\nfrechet_c_approx\nfrechet_dist_upper_bound","category":"page"},{"location":"#FrechetDist.frechet_c_compute","page":"Home","title":"FrechetDist.frechet_c_compute","text":"frechet_c_compute\n\nCompute the exact continuous (monotone) Frechet distance between the two polygons. It should be reasonably fast.\n\nThis function is somewhat slower than the approximate versions. Use it only if you really want the exact answer. Consider using frechetcontinousapprox instead.\n\nDetails\n\nThis works by first computing a very rough approximation, followed by distance senstiave simplification of the curves. It then compute the monotone frver distance between the simplified curves, and it combine it to get a distance between the two original cuves. It makre sure the answers are the same, otherwise, it repeates with a finer simplification/approximation till they are equal.\n\nFinally, the algorithm uses the frverwithoffests distance between the two simplified curves to comptue a lower bound, and make sure this is equal to the Frechet distance computed. If they are equal, then the upper/lower bounds on the Frechet distance of the two curves are the same, which implies that the computed distance is indeed the desired Frechet distance.\n\nMore details\n\nTo really ensure converges, the monotone distance computed between the simplification is computed using refinement, so tha the ve_r distance\n\n\n\n\n\n","category":"function"},{"location":"#FrechetDist.frechet_c_approx","page":"Home","title":"FrechetDist.frechet_c_approx","text":"frechet_c_approx\n\nApproximates the continuous Frechet distance between the two input curves. Returns a monotone morphing realizing it.\n\nArguments\n\napprox : The output morhing has Frechet distance <= approx*optimal.\n\nImportantly, approx can be larger than 2, if you want a really rough approximation.\n\n\n\n\n\n","category":"function"},{"location":"#FrechetDist.frechet_dist_upper_bound","page":"Home","title":"FrechetDist.frechet_dist_upper_bound","text":"frechet_dist_upper_bound\n\nReturns a rough upper bound on the Frechet distance between the two curves. This upper bound is on the continuous distance. No guarenteee on how bad the approximation is. This is used as a starting point for real approximation of the Frechet distance, and should not be used otherwise.\n\n\n\n\n\n","category":"function"}]
}
